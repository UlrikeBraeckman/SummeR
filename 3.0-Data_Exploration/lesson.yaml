- Class: meta
  Course: imbrseaR
  Lesson: Data exploration
  Author:  Crespo, O., Gauthier, O.
  Type: Standard
  Organization: IMBRSea
  Version: 2.4.5

- Class: text
  Output: Welcome to the data exploration lesson!! In this exercise, we will learn some of the possibilities in R for exploring vectors, datasets, tables, and matrices.
  
- Class: text
  Output: For a quick start, let's explore the possibilities of working with vectors that will compose our dataset.
  
- Class: text
  Output: Let's start creating a simple numerical vector with 8 values. For that, we will combine values with the function c() and assign it to an object called "a".

- Class: cmd_question
  Output: Create the vector typing "a<-c(4, 5, 10, 42, 13, 3, 8, 5)" without quotes.  
  CorrectAnswer: a<-c(4, 5, 10, 42, 13, 3, 8, 5)
  AnswerTests: any_of_exprs('a=c(4, 5, 10, 42, 13, 3, 8, 5)', 'a<-c(4,5,10,42,13,3,8,5)', "a=c(4,5,10,42,13,3,8,5)") 
  Hint: Type_ a<-c(4,5,10,42,13,3,8,5)   
  
- Class: cmd_question
  Output: You have created a numerical vector! Before exploring this vector, type a to see its output. 
  CorrectAnswer: a
  AnswerTests: omnitest(correctExpr='a')
  Hint: Type_ a
  
- Class: text
  Output: Alright, now we have an object which is a numerical vector. Of course, we know there are eight values in this object we just have created. But imagine we want to know how many values there are, in other words, what the length is of this vector...

- Class: cmd_question
  Output: To get this information, we can use the function length(). Please, check the length of our vector a.
  CorrectAnswer: length(a)
  AnswerTests: omnitest(correctExpr='length(a)')
  Hint: length(your_object)

- Class: text
  Output: Nice, let's move forward on our exploration. 

- Class: text
  Output: Imagine if this vector contains the number of individuals from different species recorded in a coral reef diving survey. It would be useful to know the total number of individuals recorded in this survey. For that, we could use the function sum() in our vector, which will sum each value of the object.   
  
- Class: cmd_question
  Output: Calculate the total number of individuals recorded.  
  CorrectAnswer: sum(a)
  AnswerTests: omnitest(correctExpr='sum(a)')
  Hint: sum(your_object)

- Class: text
  Output: All good! This survey recorded a total of 90 individuals from 8 species. To explore this data a bit more, we could check the mean number of individuals dividing the sum of values by the length of the vector.  
  
- Class: cmd_question
  Output: Try this dividing the function sum() by the function length().
  CorrectAnswer: sum(a)/length(a)
  AnswerTests: any_of_exprs('sum(a) / length(a)', 'sum(a)/ length(a)', 'sum(a) /length(a)')
  Hint: sum(object)/length(object)
  
- Class: text
  Output: Interesting, but R must have another way of calculating that, right? Of course! R can be a very intuitive language, if you want the mean of a vector, you can use the function called mean().

- Class: cmd_question
  Output: Please, calculate the mean of the vector with the function mean().
  CorrectAnswer: mean(a)
  AnswerTests: omnitest(correctExpr='mean(a)')
  Hint: mean(object)
  
- Class: text
  Output: Alright, very similar to the mean() function is if we want to know the minimum and maximum values from in our vector. This can be done with the functions min() and max(), respectively.  
  
- Class: cmd_question
  Output: Please, display the maximum value of the object a.
  CorrectAnswer: max(a)
  AnswerTests: omnitest(correctExpr='max(a)')
  Hint: max(object)
  
- Class: cmd_question
  Output: Now display the minimum value of the object a.
  CorrectAnswer: min(a)
  AnswerTests: omnitest(correctExpr='min(a)')
  Hint: min(object)
  
- Class: text
  Output: Nice, so far we have a better understanding about our vector structure and values. We practiced those previous functions, but for a shorter way to get a summary of our object's values we could call the function summary().  

- Class: cmd_question
  Output: Take a look at the summary of your object. 
  CorrectAnswer: summary(a)
  AnswerTests: omnitest(correctExpr='summary(a)')
  Hint: summary(object)

- Class: text
  Output: You can see that minimum, maximum and mean functions are also present in the summary. Besides that, we get further information on median and quartiles. If you want to understand better the function and how to use it, you can type ?summary() in the console and check for more details after this lesson.
  
- Class: text
  Output: Furthermore, it could be useful to understand the variation or dispersion of the values in our data. For that, we can ask for the standard deviation of our values with the function sd().
  
- Class: cmd_question
  Output: Calculate the standard deviation of a. 
  CorrectAnswer: sd(a)
  AnswerTests: omnitest(correctExpr='sd(a)')
  Hint: sd(object)

- Class: text
  Output: Before finishing the work on exploring vectors, remember from the introtuction lesson that the objects can have different classes. Let's create another object, a vector with class character. 
  
- Class: cmd_question
  Output: Create a vector called sp and assign to it the following values: RedFish, BlueFish, BlackFish, YellowFish. Don't forget to use the function c() and quotes for each character value.   
  CorrectAnswer: sp<-c("RedFish", "BlueFish", "BlackFish", "YellowFish")
  AnswerTests: any_of_exprs('sp<-c("RedFish","BlueFish","BlackFish","YellowFish")', 'sp=c("RedFish", "BlueFish", "BlackFish", "YellowFish")', 'sp=c("RedFish","BlueFish","BlackFish","YellowFish")') 
  Hint: sp<-c()
  
- Class: cmd_question
  Output: Take a look at your new object sp.  
  CorrectAnswer: sp
  AnswerTests: omnitest(correctExpr='sp')
  Hint: sp

- Class: cmd_question
  Output: This new vector is different from our previous vector; it has a different length and class of the objects. To make sure what type it is, please check class().
  CorrectAnswer: class(sp)
  AnswerTests: omnitest(correctExpr='class(sp)')
  Hint: class(object)

- Class: text
  Output: As a character vector, some things are different from our previous explorations, for example, we won't be able to sum the values or check for minimum and maximum. Although, we can still check the length of the object, which is composed of 4 elements. 
  

- Class: cmd_question
  Output: The summary function still works for character vectors but will give us a different output. Try it now.  
  CorrectAnswer: summary(sp)
  AnswerTests: omnitest(correctExpr='summary(sp)')
  Hint: summary(object)

- Class: cmd_question
  Output: A new function that can be very useful for character vectors is the unique() function. This function will return the unique values of a vector, this means that if you have duplicate values it will show you only once. Try it out!
  CorrectAnswer: unique(sp)
  AnswerTests: omnitest(correctExpr='unique(sp)')
  Hint: unique(object)

- Class: text
  Output: Excellent! In our case we don't have duplicated values, but we will explore it once more later on.  


- Class: text
  Output: Let's step forward and work with larger datasets. Dataframes are very common to be used in scientific research. We need to keep in mind that a dataframe is also a composition of a number of different vectors.  

- Class: cmd_question
  Output: Imagine we finished our reef survey. We have the complete data stored here in a dataframe called reeffish. Please, type reeffish to check your data.
  CorrectAnswer: reeffish
  AnswerTests: omnitest(correctExpr='reeffish')
  Hint: reeffish

- Class: text
  Output: Now we have a dataframe composed of columns and rows with the survey information. Let's use some R functions to explore this dataframe.

- Class: cmd_question
  Output: We could first check the dimentions of this dataframe. For that, please use the function dim().  
  CorrectAnswer: dim(reeffish)
  AnswerTests: omnitest(correctExpr='dim(reeffish)')
  Hint: dim(object)
  
- Class: text
  Output: The output of this function is showing us first the number of rows and number of columns. In our dataframe there are 26 rows and 5 columns. 

- Class: cmd_question
  Output: A similar answer can be obtained if you want to know only the number of columns ncol() or number of rows nrow(). Please, check the number of columns on reeffish.  
  CorrectAnswer: ncol(reeffish)
  AnswerTests: omnitest(correctExpr='ncol(reeffish)')
  Hint: ncol(object)
  
- Class: text
  Output: Of course your dataframe can be much more larger than that. Sometimes, it can be useful to use a function to check upon your dataframe without displaying all rows in it. The function head() will return the first 6 rows of your dataframe, and the function tail() shows the last 6.   
  
- Class: cmd_question
  Output: Please check the structure of your dataframe displaying the 6 first rows.
  CorrectAnswer: head(reeffish)
  AnswerTests: omnitest(correctExpr='head(reeffish)')
  Hint: head(object)
  
- Class: text
  Output: Alright! You now have an overview of the dimensions of the dataframe and which components are recorded in each column. Site, month, transect, species, and abundance were recorded on this reef fish survey. 
  
- Class: text
  Output: We need to keep in mind that a dataframe is composed of columns that can be analyzed separately, as each column is in fact a vector of variables that can be selected to explore. 

- Class: text
  Output: There are different ways of selecting a specific column from your data frame. We will explore this with the dollar sign $, which will suggest a list of the columns when used after the name of your data frame. Ex. dataframe$column.

- Class: cmd_question
  Output: Please, try typing reeffish$, wait...  look, there is a list of the columns you have in it (if not press TAB, or simply type the name of the column), and select Abundance. 
  CorrectAnswer: reeffish$Abundance
  AnswerTests: omnitest(correctExpr='reeffish$Abundance')
  Hint: reeffish$Abundance
  
- Class: text
  Output: In this case, R gives you the output of the selected column when typing reeffish$Abundance. 
  
- Class: cmd_question
  Output: Now, the same way as we did with the short vector we created in the first part of the class, get the sum of the values in the Abundance column.
  CorrectAnswer: sum(reeffish$Abundance)
  AnswerTests: omnitest(correctExpr='sum(reeffish$Abundance)')
  Hint: sum(reeffish$Abundance)

- Class: text
  Output: That's the total number of individuals recorded in the survey. When you've finished this lesson, you can repeat all the functions we have done previously for vectors in this column from our data frame, feel free to practice as much as you can.
  
- Class: cmd_question
  Output: Another example previously learned is the function unique(). Now we have 26 rows of observations, please check in the character column "Species": What are the unique values? Remember to put the dollar sign to select the column.
  CorrectAnswer: unique(reeffish$Species)
  AnswerTests: omnitest(correctExpr='unique(reeffish$Species)')
  Hint: unique(reeffish$Species)

- Class: text
  Output: You can see there are only 3 different species found in this reef, and the unique() function can be used to check the other character columns as well. Another function already used that we can apply in the whole data frame is the summary(), which will give us the summary of each column.  
  
- Class: cmd_question
  Output: Check the summary of the reeffish dataframe.
  CorrectAnswer: summary(reeffish)
  AnswerTests: omnitest(correctExpr='summary(reeffish)')
  Hint: summary(reeffish)
  
- Class: text
  Output: Note that the output from the summary is different for each class of vector and will give you a summary according to each type.
  

- Class: text
  Output: Congratulations!! You have finished this lesson. Feel free to come back whenever you want and do it again. Now you are already getting familiar with the R language and how it works. Next lesson will be about data visualization and graphical analysis. Cheers!  
